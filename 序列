序列：
Python包括6种内建序列，列表、元组、字符串、Unicode字符串、buffer对象和xrange对象
1）序列中可以包含其他序列
2）索引：从0开始。如果使用负数，则从右边开始计数（右边第一个为-1）
如果一个函数返回一个序列，可以直接对返回结果进行索引操作，如获得输入的第三个字符
three = raw_input("Year:")[2]
Year:2016 >>>three >>>'1'
3)分片：通过冒号相隔的两个索引访问一定范围内的元素
	a.开始点的元素包含在分片内，结束点不包含在内
		nums = [1,2,3,4,5,6,7,8,9]
		nums[4:7] >>> [5,6,7]
	b.可以使用负数
		nums[5:-2] >>> [6,7]
		nums[-6:-2] >>> [4,5,6,7]
	c.两个索引都可以不写
		nums[-2:] >>> [8,9]
		nums[:3]  >>> [1,2,3]
		nums[:]	  >>> [1,2,3,4,5,6,7,8,9]
	d.设置步长，默认是1
		nums[1:9:2] >>> [2,4,6,8]	#步长为2
		步长不能为0，但是可以为负数，步长为负数是开始点必须大于结束点
		nums[9:1:-2] >>> [9,7,5,3]
4）序列相加：只能相同数据类型操作
5）乘法：序列乘以N结果会得到N个序列组成的新序列
	nums*2 >>> [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]
6)用None创建空列表 nums = [None]*5 >>> [None,None,None,None,None]
7)用in检查一个值是否在序列中
	 2 in nums >>> True
8)内建函数：len(nums) >>> 9; Max(nums) >>> 9; Min(nums) >>> 1

列表
1）列表内容可变
2）list函数：根据字符串创建列表
	strs = 'hello'
	list(strs) >>> ['h','e','l','l','o']
	将字符串组成的列表转换为字符串：
	lst = list(strs)
	''.join(lst)  >>> 'hello'
3）赋值
	a.单个赋值	nums[2] = 20 >>> [1, 2, 20, 4, 5, 6, 7, 8, 9]
	b.分片赋值	nums[2:4] = [30,40] >>> [1, 2, 30, 40, 5, 6, 7, 8, 9]
	  分片赋值可以使用与原序列不等长的序列将分片替换,超出部分新插入序列
	  #30和40替换了原列表分片[2:4]中的3和4, 50和60作为新元素插入到列表中
	  nums[2:4]=[30,40,50,60] >>>  [1, 2, 30, 40, 50, 60, 5, 6, 7, 8, 9]
	c.通过分片赋值进行新增删除操作
	  nums = [1,6]
	  nums[1:1] = [3,4]  >>> [1,3,4,6]
	  nums = [1,3,4,6]
	  nums[1:3] = [] >>> [1,6]
	  
4）删除
	del nums[3] >>> [1, 2, 3, 5, 6, 7, 8, 9]
	  
5）列表常用方法：
	append：在列表末尾添加新对象
		nums = [1,3,4]
		nums.append('a') >>> [1,3,4,'a']
		nums.append([5,6]) >>> [1,3,4,'a',[5,6]]  #添加的对象只能当作一个元素
	count：统计某个元素在列表中出现的次数 >>>[1,1,2,3,4].count(1) >>> 2
	extend：在列表的末尾追加另一个序列中的多个值 
		nums = [1,3,4]
		nums.extend('a') >>> [1,3,4,'a']
		nums.extend(['a','b']) >>> [1,3,4,'a','a','b']] #将追加的对象拓展原列表
	index：从列表中找出某个值第一个匹配想的索引位置
		nums = [1,2,3,4]
		nums.index(2) >>> 1
	insert：将对象插入到列表中
	pop：移除列表的一个元素（默认最后一个），并返回该元素的值
		nums = [1,2,3,4,5]
		nums.pop()  >>> 5
		nums.pop(3) >>> 4
	remove：移除第一次出现的元素,没有返回值
		nums = [1,2,4,5,4,2]
		nums.remove(2) >>> [1,4,5,4,2]
	reverse：将列表值倒置
		nums = [1,2,3]
		nums.reverse() >>> [3,2,1]
	sort：直接改变原列表排序，返回空值
		x=[3.4.2.7.5.9.1]
		x.sort() >>> x=[1,2,3,4,5,7,9]
		如果想得到一个新的排序后的列表，而原列表不变：
		a. y=x.sort() #y值为空，因为sort方法改变了x然后返回了空值给y
		b. y=x  
		   >>> y.sort()  
		   >>> x=[1,2,3,4,5,7,9] y=[1,2,3,4,5,7,9] #x/y值一样，因为都指向同一个列表
		c. y=x[:] 	#将x所有元素取出赋值给y，这样x，y就是两个列表了
		   y.sort()
		   >>>x=[3.4.2.7.5.9.1]  y=[1,2,3,4,5,7,9] #结果正确
		d. y = sorted(x)	#sorted返回排序后的列表
		   >>>x=[3.4.2.7.5.9.1]  y=[1,2,3,4,5,7,9] #结果正确 
		注：如果想反方向排序，可以先用sort或者sorted，然后再用reverse倒置

元组
1）元组内容不可变
2）当只有一个值时后面必须加一个逗号（,）,否则就不是元组
3）tuple函数：以一个序列为参数，转换为元组
	tuple([1,2,3]) >>> (1,2,3)
4)一般元组都可以用列表来替代使用，但是元组可以在映射中当作建使用，列表则不可以。
